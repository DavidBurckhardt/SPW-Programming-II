1 program TrabajoEspecialDavidBurckhardt;
    2 {Este programa es una adaptación simplificada del juego "Pasapalabra" donde dos jugadores
    3 se enfrentan en un duelo de preguntas, siendo el ganador aquel que de la mayor cantidad de respuestas acertadas.
    4 °El programa nos permite:
    5     *Añadir jugadores.
    6     *Ver la lista de todos los jugadores.
    7     *Ver el top 10 de jugadores según la cantidad de partidas ganadas de cada uno.
    8     *Jugar.
    9     *Eliminar Jugadores.
   10     
   11 °Aclaraciones:
   12   *La partida termina cuando uno de los dos roscos no tiene mas preguntas pendientes.
   13   *Se aplicaron colores, "delays", limpiezas de pantalla y uso de coordenadas durante el desarrolo del programa con el fin de agregar simples detalles y comprender el uso de estas funciones de Pascal.
   14   *Al momento de entregar este trabajo de manera definitiva se hizo un "Rewrite" del archivo que contiene a los jugadores. Es decir, se encuentra sin datos en este momento.
   15   *Para jugar una partida se requieren al menos dos jugadores agregados en el archivo.
   16   *No se pueden agregar jugadores que tengan exactamente el mismo nombre que uno que ya fue agregado.
   17   *Al momento de agregar un jugador se pasan todas sus letras a minúsculas. Además se le modifica la letra inicial para que esta quede en mayúscula. Ejemplo: Si el usuario agrega al jugador "daVId" se añadirá como "David". Este mecanismo se utiliza en cualquier parte del programa que se solicite un nombre.
   18   *Al momento de leer la opción a realizar, se utiliza una variable de tipo string debido a problemas de pascal.
   19   *Se verifica que los sets de preguntas de los dos roscos no sean iguales para iniciar una partida.
   20   *Si los jugadores empatan no se suman partidas ganadas a ninguno de los dos jugadores.
   21   *Si se elige la opción de mostrar los 10 jugadores con mayor cantidad de partidas ganadas pero todavía no se alcanzó esa cantidad de jugadores agregados. El arreglo quedará incompleto pero funcionará de todas formas con la cantidad de jugadores que esten cargados.
   22   *Al momento de pedir un nombre en cualquier parte del programa se verifica que no exceda de 20 caracteres para no recorrer innecesariamente el árbol.
   23   *Durante la partida el usuario deberá ingresar las respuestas sin tilde, esto fue comentado. Podrá ingresar la repsuesta correcta con minúsculas o mayúsculas, es indistinto.
   24   *Si el jugador erra la respuesta durante la partida, se mostrará la respuesta correcta.}
   25 
   26 uses crt; //Lo utilizo para la aplicación de colores, determinar coordenadas, emplear "delay" y limpiar la consola.}
   27 
   28 {DEFINICIÓN DE TIPOS Y CONSTANTES}
   29 Const
   30 //Máximos y Mínimos de arreglos
   31 Minimo=1;
   32 MaxGanadores=10;
   33 MaxPartida=2;
   34 //Se utilizan para definir la cantidad de preguntas a cargar en los roscos
   35 A=1;
   36 Z=26;
   37 
   38 Type
   39     //Definición de Archivos
   40     DatosJugador=record
   41         Nombre: String[20];
   42         CantPartidas: Integer;
   43         Eliminado: Boolean;
   44     end;
   45     reg_palabra = record
   46     	nro_set : integer;
   47     	letra : char;
   48     	palabra,consigna : string;
   49     end;
   50     ArchivoJugadores= File of DatosJugador;
   51     ArchivoPreguntas= File of reg_palabra; 
   52     
   53     //Definición de Árbol
   54     PuntArbol=^TipoArbol;
   55     TipoArbol=record
   56         Nombre: String[20];
   57         CantPartidas: Integer;
   58         Menores,Mayores: PuntArbol;
   59     end;
   60     
   61     //Definición de Arreglos
   62     PuntListaCircular=^TipoListaCircular;
   63     TipoListaCircular=record
   64         Letra: char;
   65         Palabra,Consigna: String;
   66         Respuesta:(Pendiente,Acertada,Errada);
   67         Sig: PuntListaCircular;
   68     end;
   69     Participante=record
   70         Nombre: String[20];
   71         Rosco: PuntListaCircular;
   72     end;
   73     ArregloGanadores= Array[Minimo..MaxGanadores] of PuntArbol;
   74     ArregloPartida= Array[Minimo..Maxpartida] of Participante;
   75 
   76 {PROCEDIMIENTOS Y FUNCIONES}
   77 {Este procedimiento permite abrir un archivo, si existe lo abre en la posición 0, sino, lo crea.}
   78 Procedure AbrirArchivo(var PalaPasabra: ArchivoJugadores);
   79 begin
   80     {$I-}
   81     Reset(PalaPasabra);
   82     {$I+}
   83     If ioresult<>0 then
   84         Rewrite(PalaPasabra);
   85 end;
   86 
   87 {Este procedimiento permite crear un nodo del árbol de jugadores y rellenar sus campos.}
   88 Procedure CrearNodoArbol(var NuevoNodo: PuntArbol; NombreJugador: String; PartidasGanadas: Integer);
   89 begin
   90     New(NuevoNodo);
   91     NuevoNodo^.Nombre:=NombreJugador;
   92     NuevoNodo^.CantPartidas:=PartidasGanadas;
   93     NuevoNodo^.Menores:= nil;
   94     NuevoNodo^.Mayores:=nil;
   95 end;
   96 
   97 {Este procedimiento nos permite insertar un nodo en un árbol. El árbol se encuentra ordenado por nombre de jugador.}
   98 Procedure InsertarNodoArbol(var Jugadores: PuntArbol; NuevoNodo: PuntArbol);
   99 begin
  100     If Jugadores=nil then
  101         Jugadores:=NuevoNodo
  102     else If Jugadores^.Nombre>NuevoNodo^.Nombre then
  103         InsertarNodoArbol(Jugadores^.Menores,NuevoNodo)
  104     else If Jugadores^.Nombre<NuevoNodo^.Nombre then
  105         InsertarNodoArbol(Jugadores^.Mayores,NuevoNodo);
  106 end;
  107 
  108 {Este procedimiento permite agregar un jugador al archivo a partir del nombre que recibe como parámetro.}
  109 Procedure AgregarEnArchivo(var PalaPasabra: ArchivoJugadores; NombreJugador: String);
  110 var NuevoJugador: DatosJugador;
  111 begin
  112     NuevoJugador.Nombre:=NombreJugador;
  113     NuevoJugador.CantPartidas:=0;
  114     NuevoJugador.Eliminado:=False;
  115     Seek(PalaPasabra,FileSize(PalaPasabra)); //Se posiciona al final del archivo para agregar al jugador.
  116     Write(PalaPasabra,NuevoJugador);
  117 end;
  118 
  119 {Este procemiento nos permite agregar un jugador al árbol a partir de un nombre y cantidad de partidas ganadas que recibe como parámetro.}
  120 Procedure AgregarEnArbol(var Jugadores: PuntArbol; NombreJugador: String; PartidasGanadas: Integer);
  121 var NuevoNodo: PuntArbol;
  122 begin
  123     CrearNodoArbol(NuevoNodo,NombreJugador,PartidasGanadas);
  124     InsertarNodoArbol(Jugadores,NuevoNodo);
  125 end;
  126 
  127 {Esta funcion verifica si un jugador ésta o no en el árbol.}
  128 Function EstaEnArbol(Jugadores: PuntArbol; Nombre: String): Boolean;
  129 begin
  130     If Jugadores<>nil then begin
  131         If Jugadores^.Nombre=Nombre then
  132             EstaEnArbol:=True
  133         else If Jugadores^.Nombre>Nombre then
  134             EstaEnArbol:= EstaEnArbol(Jugadores^.Menores,Nombre)
  135         else If Jugadores^.Nombre<Nombre then
  136             EstaEnArbol:= EstaEnArbol(Jugadores^.Mayores,Nombre);
  137     end
  138     else
  139         EstaEnArbol:=False;
  140 end;
  141 
  142 {Este procedimiento se encarga de leer el archivo y cargar sus datos en un árbol ordenado por nombre.}
  143 Procedure GenerarArbol(var PalaPasabra: ArchivoJugadores; var Jugadores: PuntArbol);
  144 var Jugador: DatosJugador;
  145 begin
  146     While not eof(PalaPasabra) do begin
  147         Read(PalaPasabra,Jugador);
  148         If Jugador.Eliminado=False then
  149             AgregarEnArbol(Jugadores,Jugador.Nombre,Jugador.CantPartidas);
  150     end;
  151 end;
  152 
  153 {Este procedimiento nos permite cargar un nuevo jugador en el árbol y en el archivo.}
  154 Procedure AgregarJugador(var PalaPasabra: ArchivoJugadores; var Jugadores: PuntArbol);
  155 var Nombre,Opcion: String;
  156     JugadorAgregado: Boolean;
  157 begin
  158     JugadorAgregado:=False;
  159     While not JugadorAgregado do begin
  160         Clrscr;
  161         GotoXY(32,2);
  162         Writeln('AÑADIR JUGADOR');
  163         Writeln;
  164         Write('Ingrese nombre de jugador a agregar: ');
  165         Readln(Nombre);
  166         Writeln;
  167         Nombre:=LowerCase(Nombre); //Pasa todas las letras del nombre a minúscula. Si ya estaban en minúscula, quedan iguales.
  168         Nombre[1]:=UpCase(Nombre[1]); //Cambia la inicial del nombre a mayúscula. Si el nombre introducido tiene la inicial en mayúscula, queda igual.
  169         If (Length(Nombre)<20) and (not EstaEnArbol(Jugadores,Nombre)) then begin //Si el nombre posee más de 20 caracteres directamente no se recorre el árbol.
  170             AgregarEnArchivo(PalaPasabra,Nombre);
  171             AgregarEnArbol(Jugadores,Nombre,0);
  172             Writeln('JUGADOR AGREGADO CON ÉXITO');
  173             delay(1500); //Se congela la pantalla por 1,5 segundos. Lo utilizo para visualizar el mensaje de arriba antes de limpiar la pantalla.
  174             JugadorAgregado:=true; 
  175         end
  176         else begin
  177             Writeln('El jugador no se pudo añadir ya que ya existe ó su nombre posee más de 20 caracteres');
  178             Writeln('¿Desea ingresar otro nombre?(s/n)');
  179             Readln(Opcion);
  180             If Opcion='n' then
  181                 JugadorAgregado:=True;
  182         end;
  183     end;
  184 end;
  185 
  186 {Este procemiento permite mostrar un árbol.}
  187 Procedure MostrarArbol(Jugadores: PuntArbol);
  188 begin
  189     If Jugadores<>nil then begin
  190         MostrarArbol(Jugadores^.Menores);
  191         Writeln(Jugadores^.Nombre,' | ',Jugadores^.CantPartidas);
  192         MostrarArbol(Jugadores^.Mayores);
  193     end;
  194 end;
  195 
  196 {Este procedimiento nos muestra una lista ordenada alfabéticamente de todos los jugadores cargados.}
  197 Procedure VerListaJugadores(Jugadores: PuntArbol);
  198 begin
  199     Clrscr;
  200     If Jugadores<>nil then begin
  201         GotoXY(30,2);
  202         Writeln('LISTA DE JUGADORES');
  203         Writeln;
  204         Writeln('NOMBRE | PARTIDAS GANADAS');
  205         MostrarArbol(Jugadores);
  206     end
  207     else
  208         Writeln('No hay jugadores cargados');
  209     Writeln;
  210     Writeln('Pulse cualquier tecla para volver al menú principal');
  211     Readkey;
  212 end;
  213 
  214 {Esta función nos devuelve la posición en la que debemos agregar al nuevo jugador.}
  215 {En caso de que el jugador no esté entre los 10 mejores jugadores la posición que devuelve es 0.}
  216 Function PosicionRequerida(Diez_Maximos_Ganadores: ArregloGanadores; Valor: integer): Integer;
  217 var Posicion: Integer;
  218 begin
  219     Posicion:=1;
  220     While (Posicion<=MaxGanadores) and (Diez_Maximos_Ganadores[Posicion]<>nil) and (Diez_Maximos_Ganadores[Posicion]^.CantPartidas>=Valor) do
  221         Posicion:= Posicion+1;
  222     If Posicion>MaxGanadores then
  223         PosicionRequerida:=0
  224     else 
  225         PosicionRequerida:=Posicion;
  226 end;
  227 
  228 {Este procedimiento permite generar el espacio en el arreglo para incorporar al nuevo jugador.}
  229 {Se realiza un corrimiento a derecha, descartando el jugador que se encontraba en la última posición que ya no pertenece a los 10 mejores.}
  230 {Desde el máximo(jugador con menos partidas ganadas) hasta la posicion indicada +1, cada casilla pasa a apuntar lo que apunta su casilla anterior.}
  231 Procedure GenerarEspacio(var Diez_Maximos_Ganadores: ArregloGanadores; Posicion: Integer);
  232 var Jugador: Integer;
  233 begin
  234     for Jugador:= MaxGanadores downto (Posicion+1) do 
  235         Diez_Maximos_Ganadores[Jugador]:=Diez_Maximos_Ganadores[Jugador-1];
  236 end;
  237 
  238 {Este procemiento permite actualizar el arreglo, analizando si el jugador que se envía por parámetro se encuentra entre los 10 mejores jugadores.}
  239 {El arreglo siempre permanece ordenado descendentemente a medida que se le agregan jugadores.}
  240 Procedure ActualizarArreglo(var Diez_Maximos_Ganadores: ArregloGanadores; Jugadores: PuntArbol);
  241 var Posicion: Integer;
  242 begin
  243     Posicion:= PosicionRequerida(Diez_Maximos_Ganadores,Jugadores^.CantPartidas);
  244     If Posicion<>0 then begin //Si la posición es 0 significa que el jugador no debe ser insertado en el arreglo(No está entre los 10 mejores).
  245         If (Posicion<10) and (Diez_Maximos_Ganadores[Posicion]<>nil) then //En caso de que la posición sea igual a 10 o la casilla no tenga asignada ningún jugador, significa que no es necesario realizar ningun corrimiento, el jugador es insertado directamente.
  246             GenerarEspacio(Diez_Maximos_Ganadores,Posicion);
  247         Diez_Maximos_Ganadores[Posicion]:=Jugadores; //Se inserta el jugador en el arreglo.
  248     end;
  249 end;
  250 
  251 {Este procedimiento permite completar el arreglo de los 10 mejores jugadores a partir de recorrer el árbol de forma In Order(Ascendente).}
  252 Procedure RellenarArreglo(var Diez_Maximos_Ganadores: ArregloGanadores; Jugadores: PuntArbol);
  253 begin
  254     If Jugadores<>nil then begin
  255         RellenarArreglo(Diez_Maximos_Ganadores,Jugadores^.Menores);
  256         ActualizarArreglo(Diez_Maximos_Ganadores,Jugadores);
  257         RellenarArreglo(Diez_Maximos_Ganadores,Jugadores^.Mayores);
  258     end;
  259 end;
  260       
  261 {Este procemiento tiene el objetivo de mostrar el arreglo cargado.}
  262 Procedure MostrarArreglo(Diez_Maximos_Ganadores: ArregloGanadores);
  263 var Puesto: Integer;
  264 begin
  265     GotoXY(28,2);
  266     Writeln('TOP 10 MEJORES JUGADORES');
  267     Writeln;
  268     Writeln('PUESTO | NOMBRE | PARTIDAS GANADAS');
  269     For Puesto:= Minimo to MaxGanadores do
  270         If Diez_Maximos_Ganadores[Puesto]<>nil then
  271             Writeln(Puesto,'° ',Diez_Maximos_Ganadores[Puesto]^.Nombre,' | ',Diez_Maximos_Ganadores[Puesto]^.CantPartidas);
  272 end;
  273 
  274 {Este procemiento permite mostrar a los 10 mejores jugadores ordenados descendentemente por cantidad de partidas ganadas.}
  275 Procedure MostrarTop10(Jugadores: PuntArbol);
  276 var Diez_Maximos_Ganadores: ArregloGanadores;
  277     Jugador: Integer;
  278 begin
  279     Clrscr;
  280     If Jugadores<>nil then begin
  281         For Jugador:= Minimo to MaxGanadores do //Se inicializa el arreglo en nil para evacuar errores.
  282             Diez_Maximos_Ganadores[Jugador]:=nil;
  283         RellenarArreglo(Diez_Maximos_Ganadores,Jugadores);
  284         MostrarArreglo(Diez_Maximos_Ganadores);
  285     end
  286     else
  287         Writeln('No hay jugadores cargados');
  288     Writeln;
  289     Writeln('Pulse cualquier tecla para volver al menú principal');
  290     Readkey;
  291 end;
  292 
  293 {Este procemiento tiene la finalidad de agregar un jugador al arreglo partida}
  294 {Si el jugador solicitado no existe se pedirá otro hasta que el nombre introducido sea válido.}
  295 Procedure CargarJugador(var Partida: ArregloPartida; Jugadores: PuntArbol; NroJugador: integer);
  296 var JugadorInsertado: Boolean;
  297     NombreJugador: String;
  298 begin
  299     JugadorInsertado:=False;
  300     While not JugadorInsertado do begin
  301         Writeln;
  302         Write('Ingrese nombre de Jugador ',NroJugador,' : ');
  303         Readln(NombreJugador);
  304         NombreJugador:=LowerCase(NombreJugador); 
  305         NombreJugador[1]:=UpCase(NombreJugador[1]); 
  306         If (Length(NombreJugador)<20) and (EstaEnArbol(Jugadores,NombreJugador)) then begin //Si el nombre posee más de 20 caracteres directamente no se recorre el árbol.
  307             Partida[NroJugador].Nombre:=NombreJugador;
  308             Partida[NroJugador].Rosco:=nil; //Se inicializa la casilla de tipo PuntListaCircular del arreglo para evacuar errores.
  309             JugadorInsertado:=True;
  310         end
  311         else begin
  312             Writeln;
  313             Writeln('El Jugador solicitado no existe');
  314         end;
  315     end;
  316 end;
  317 
  318 {Este procedimiento permite ingresar los dos jugadores que participan en la partida.}
  319 {Si los nombres de los jugadores ingresados son iguales se cambia el jugador que el usuario prefiera.}
  320 Procedure IngresarJugadores(var Partida: ArregloPartida; Jugadores: PuntArbol);
  321 var NroJugador: Integer;
  322 begin
  323     GotoXY(18,2);
  324     Writeln('INGRESE DOS JUGADORES PARA COMENZAR LA PARTIDA');
  325     for NroJugador:= Minimo to MaxPartida do
  326         CargarJugador(Partida,Jugadores,NroJugador);
  327     While Partida[1].Nombre=Partida[2].Nombre do begin //Se verifica que no se ingresó dos veces el mismo jugador.
  328         Writeln;
  329         Writeln('Los nombres ingresados son iguales');
  330         Writeln('¿Que jugador desea cambiar?(1/2)');
  331         Readln(NroJugador);
  332         CargarJugador(Partida,Jugadores,NroJugador);
  333     end;
  334     Writeln;
  335     Writeln('JUGADORES CARGADOS CON ÉXITO');
  336     delay(1500);
  337     Clrscr; //Se limpia la consola para comenzar la partida.
  338 end;
  339 
  340 {Este procedimiento permite crear un nodo de tipo lista circular y rellenar sus campos.}
  341 Procedure CrearNodoLista(var NuevoNodo: PuntListaCircular; Pregunta: reg_palabra);
  342 begin
  343     New(NuevoNodo);
  344     NuevoNodo^.Letra:=Pregunta.Letra;
  345     NuevoNodo^.Palabra:=Pregunta.palabra;
  346     NuevoNodo^.Consigna:=Pregunta.consigna;
  347     NuevoNodo^.Respuesta:=Pendiente;
  348     NuevoNodo^.Sig:=nil;
  349 end;
  350 
  351 {Este procedimiento inserta un nodo enviado por parámetro en la lista circular que simula el rosco de preguntas.}
  352 Procedure InsertarNodoLista(var Rosco: PuntListaCircular; NuevoNodo: PuntListaCircular);
  353 var Cursor: PuntListaCircular;
  354 begin
  355     If Rosco=nil then begin
  356         Rosco:=NuevoNodo;
  357         NuevoNodo^.sig:=Rosco;
  358     end
  359     else begin
  360         Cursor:=Rosco;
  361         While Cursor^.sig<>Rosco do //Si cursor^.sig=rosco significa que se reocorrió la lista completa.
  362             Cursor:=Cursor^.sig;
  363         Cursor^.sig:=NuevoNodo;
  364         NuevoNodo^.sig:=Rosco;
  365     end;
  366 end;
  367     
  368 {Este procedimiento crea el rosco de un jugador con preguntas para las 26 letras del abecedario.}
  369 Procedure CrearRosco(var Rosco: PuntListaCircular; var Preguntas: ArchivoPreguntas; var SetAnterior: Integer);
  370 var Pregunta: reg_palabra;
  371     NuevoNodo: PuntListaCircular;
  372     NumeroSet,PrimerPregunta,Letra: Integer;
  373 begin
  374     NumeroSet:= Random(5)+1;
  375     While NumeroSet=SetAnterior do //Se verifica que los roscos no tengan el mismo set de preguntas entre ambos jugadores.
  376         NumeroSet:= Random(5)+1;
  377     SetAnterior:=NumeroSet;
  378     PrimerPregunta:=(NumeroSet-1)*26;
  379     Seek(Preguntas,PrimerPregunta);
  380     For Letra:= A to Z do begin //A y Z son constantes definidas.
  381         Read(Preguntas, Pregunta);
  382         CrearNodoLista(NuevoNodo,Pregunta);
  383         InsertarNodoLista(Rosco,NuevoNodo);
  384     end;
  385 end;
  386 
  387 {Este procedimiento permite cargar las preguntas de los roscos del arreglo.}
  388 Procedure CargarPreguntas(var Partida: ArregloPartida; var Preguntas: ArchivoPreguntas);
  389 var Jugador: Integer;
  390     SetAnterior: Integer;
  391 begin
  392     SetAnterior:=0; //Se inicializa el SetAnterior en 0 debido a que todavía no se cargo ningún rosco.
  393     Reset(Preguntas);
  394     For Jugador:= Minimo to MaxPartida do
  395         CrearRosco(Partida[Jugador].Rosco,Preguntas,SetAnterior);
  396     Close(Preguntas);
  397 end;
  398 
  399 {Este procedimiento devuelve el nodo con la pregunta pendiente más próxima.}
  400 {En caso de que no haya más preguntas pendientes devuelve el nodo donde comenzó a recorrer el rosco y finalizará la partida.}
  401 Function ProxPreguntaPendiente(Rosco: PuntListaCircular): PuntListaCircular;
  402 var Cursor: PuntListaCircular;
  403 begin
  404     If Rosco^.Respuesta<>Pendiente then begin
  405         Cursor:=Rosco^.sig;
  406         While (Cursor<>Rosco) and (Cursor^.Respuesta<>Pendiente) do 
  407             Cursor:=Cursor^.sig;
  408         ProxPreguntaPendiente:=Cursor;
  409     end
  410     else
  411         ProxPreguntaPendiente:=Rosco;
  412 end;
  413 
  414 {Este procedimiento se encarga de llevar a cabo el turno de un jugador. Cada vez que se llama este procedimiento el rosco del jugador se encuentra en una pregunta pendiente.}
  415 {Se utiliza una variable booleana que indica si acertó ó no para saber si es necesario cambiar de turno.}
  416 {Único procedimiento del programa que implementa el uso de colores. Se puede ver en las palabras, CORRECTO, INCORRECTO y PALAPASABRA}
  417 Procedure DesarrollarTurno(Partida: ArregloPartida; NroJugador: Integer; var Acerto: Boolean);
  418 var RespuestaJugador: String;
  419 begin
  420     GotoXY(31,7);
  421     Writeln('TURNO DE ',UpCase(Partida[NroJugador].Nombre));
  422     Writeln('LETRA: ',Partida[NroJugador].Rosco^.Letra);
  423     Write('PREGUNTA: ');
  424     Writeln(Partida[NroJugador].Rosco^.Consigna,': ');
  425     Write('RESPUESTA: ');
  426     Readln(RespuestaJugador);
  427     RespuestaJugador:=LowerCase(RespuestaJugador); //Si el jugador ingresa la respuesta correcta parcial ó completamente con mayúsculas será considerada como válida.
  428     If RespuestaJugador='pp' then begin
  429         Acerto:=False;
  430         TextColor(LightBlue);
  431         GotoXY(30,13);
  432         Writeln('¡¡PALAPASABRA!!');//Si el jugador dice "palapasabra" se indica con color celeste.
  433         TextColor(LightGray);
  434     end
  435     else If RespuestaJugador=Partida[NroJugador].Rosco^.Palabra then begin
  436         Partida[NroJugador].Rosco^.Respuesta:=Acertada;
  437         Acerto:=True;
  438         TextColor(LightGreen);
  439         GotoXY(31,13);
  440         Writeln('¡¡CORRECTO!!'); //Si el jugador acierta lo indicamos con la palabra "correcto" en verde.
  441         TextColor(LightGray);
  442     end
  443     else begin
  444         Partida[NroJugador].Rosco^.Respuesta:=Errada;
  445         Acerto:=False;
  446         Writeln('RESPUESTA CORRECTA: ',Partida[NroJugador].Rosco^.Palabra); //Si el jugador falla se muestra la respuesta correcta.
  447         TextColor(LightRed);
  448         GotoXY(30,13);
  449         Writeln('¡¡INCORRECTO!!'); //Si el jugador falla lo indicamos con la palabra "incorrecto" en rojo.
  450         TextColor(LightGray);
  451     end;
  452     delay(1000); //Se espera un segundo luego de la respuesta de cada jugador antes de cambiar de turno.
  453     Clrscr;
  454 end;
  455             
  456 {Este procedimiento se encarga de desarrollar la partida de principio a fin.}
  457 Procedure DesarrollarPartida(Partida: ArregloPartida);
  458 var Acerto: Boolean;
  459     NroJugador: Integer;
  460 begin
  461     NroJugador:=1;
  462     GotoXY(28,2);
  463     Writeln('¡¡¡COMIENZA EL JUEGO!!!');
  464     Writeln;
  465     Writeln('*Ingresar todas las respuestas sin tilde');
  466     Writeln('*Para pasar de turno sin responder ingresar "pp" en la respuesta');
  467     While (Partida[1].Rosco^.Respuesta=Pendiente) and (Partida[2].Rosco^.Respuesta=Pendiente) do begin //Mientras ambos roscos esten sobre preguntas pendientes, el juego continua. 
  468         DesarrollarTurno(Partida,NroJugador,Acerto); //En la primer iteración ambos roscos se encuentra en preguntas pendientes, es decir, no es necesario avanzar en el rosco.
  469         Partida[NroJugador].Rosco:= ProxPreguntaPendiente(Partida[NroJugador].Rosco^.sig); //Avanzo hasta la siguiente pregunta pendiente en el rosco. Si no hay más pendientes, se da la vuelta completa y devuelve la misma posición (que no será pendiente).
  470         If not Acerto then //En caso de que el jugador durante su turno no haya acertado(es decir que erró o dijo "palapasabra"), se cambia de turno al siguiente jugador. En un primer momento se tuvo la idea de poner esta sentencia "If/else" dentro de una función "ProxJugador" que cambiaba el turno.
  471             If NroJugador=MaxPartida then
  472                 NroJugador:=1
  473             else
  474                 NroJugador:=2;
  475     end;
  476     GotoXY(30,2);
  477     Writeln('¡¡¡FIN DEL JUEGO!!!');
  478 end;
  479 
  480 {Este procemiento actualiza las victorias de un jugador dentro del archivo.}
  481 {No es necesario comprobar que el jugador está en el archivo debido a que esto ya fue verificado a la hora de elegir a los participante del juego. En otras palabras, el jugador estará si o si en el archivo.}
  482 Procedure ActualizarVictoriasArchivo(var PalaPasabra: ArchivoJugadores; Nombre: String);
  483 var Jugador: DatosJugador;
  484 begin
  485     Seek(PalaPasabra,0);
  486     Read(PalaPasabra,Jugador);
  487     While (Jugador.Nombre<>Nombre) or (Jugador.Eliminado=True) do
  488         Read(PalaPasabra,Jugador);
  489     Jugador.CantPartidas:= Jugador.CantPartidas+1;
  490     Seek(PalaPasabra,Filepos(PalaPasabra)-1);
  491     Write(PalaPasabra,Jugador);
  492 end;
  493 
  494 {Este procemiento actualiza las victorias de un jugador en el árbol.}
  495 {No es necesario comprobar que el jugador está en el árbol debido a que esto ya fue verificado a la hora de elegir a los participante del juego. En otras palabras, el jugador estará si o si en el árbol.}
  496 Procedure ActualizarVictoriasArbol(Jugadores: PuntArbol; Nombre: String);
  497 begin
  498     If Jugadores^.Nombre=Nombre then 
  499         Jugadores^.CantPartidas:=Jugadores^.CantPartidas+1
  500     else If Jugadores^.Nombre>Nombre then
  501         ActualizarVictoriasArbol(Jugadores^.Menores,Nombre)
  502     else If Jugadores^.Nombre<Nombre then
  503         ActualizarVictoriasArbol(Jugadores^.Mayores,Nombre);
  504 end;
  505 
  506 {Esta función devuelve la cantidad de respuestas acertadas que dio un jugador.}
  507 Function CantAciertos(Rosco: PuntListaCircular): Integer;
  508 var Cursor: PuntListaCircular;
  509 begin
  510     CantAciertos:=0;
  511     If Rosco^.Respuesta=Acertada then
  512         CantAciertos:=CantAciertos+1;
  513     Cursor:=Rosco^.sig;
  514     While Cursor<>Rosco do begin
  515         If Cursor^.Respuesta=Acertada then
  516             CantAciertos:=CantAciertos+1;
  517         Cursor:=Cursor^.sig;
  518     end
  519 end;
  520         
  521 {Este procedimiento se encarga de actualizar el historial de partidas del jugador ganador de la partida.}
  522 {Si los jugadores empatan no es necesario actualizar las victorias.}
  523 Procedure ActualizarHistorialGanador(Partida: ArregloPartida; Jugadores: PuntArbol; var PalaPasabra: ArchivoJugadores);
  524 var AciertosJugador1,AciertosJugador2,JugadorGanador: Integer;
  525 begin
  526     JugadorGanador:=0;
  527     AciertosJugador1:= CantAciertos(Partida[1].Rosco); 
  528     AciertosJugador2:= CantAciertos(Partida[2].Rosco);
  529     Writeln;
  530     Writeln(Upcase(Partida[1].Nombre),' ACERTO ',AciertosJugador1,' PREGUNTA/S');
  531     Writeln(Upcase(Partida[2].Nombre),' ACERTO ',AciertosJugador2,' PREGUNTA/S');
  532     Writeln;
  533     If AciertosJugador1>AciertosJugador2 then 
  534         JugadorGanador:=1 
  535     else If AciertosJugador1<AciertosJugador2 then
  536         JugadorGanador:=2;
  537     If (JugadorGanador=1) or (JugadorGanador=2) then begin
  538         Writeln('EL GANADOR DE ESTA PARTIDA ES ',UpCase(Partida[JugadorGanador].Nombre),', FELICITACIONES!!'); //Se utiliza la función "Upcase" para escribir el nombre completo en mayúscula.
  539         ActualizarVictoriasArchivo(PalaPasabra,Partida[JugadorGanador].Nombre);
  540         ActualizarVictoriasArbol(Jugadores,Partida[JugadorGanador].Nombre);
  541     end
  542     else
  543         Writeln('Los Jugadores empataron');
  544 end;
  545        
  546 {Este procedimiento se encarga del desarrollo completo del juego. Desde solicitar los participantes y cargar las preguntas hasta actualizar las partidas ganadas.}
  547 {Se verifica que hay al menos dos jugadores cargados en el árbol, de no ser así, se muestra con un mensaje y se vuelve al menú principal.}
  548 Procedure Jugar(Jugadores: PuntArbol; var Preguntas: ArchivoPreguntas; var PalaPasabra: ArchivoJugadores);
  549 var Partida: ArregloPartida;
  550 begin
  551     Clrscr;
  552     If (Jugadores<>nil) and ((Jugadores^.Mayores<>nil) or (Jugadores^.Menores<>nil)) then begin
  553         IngresarJugadores(Partida,Jugadores);
  554         CargarPreguntas(Partida,Preguntas);
  555         DesarrollarPartida(Partida);
  556         ActualizarHistorialGanador(Partida,Jugadores,PalaPasabra);
  557     end
  558     else begin
  559         Writeln('No hay cantidad suficiente de jugadores agregados para jugar. ');
  560         Writeln('Por favor, cargue al menos dos jugadores para comenzar la partida.'); //Se necesitan al menos dos jugadores para jugar una partida.
  561     end;
  562     Writeln;
  563     Writeln('Pulse cualquier tecla para volver al menú principal');
  564     Readkey;
  565 end;
  566 
  567 {Este procemiento se encarga de extraer el menor nodo de un subárbol de mayores dado.}
  568 Procedure ExtraerMenorMayores(var Jugadores,Sustituto: PuntArbol);
  569 begin
  570     If Jugadores<>nil then begin
  571         ExtraerMenorMayores(Jugadores^.Menores,Sustituto);
  572         If Sustituto=nil then
  573             Sustituto:=Jugadores
  574         else If Jugadores^.Menores=Sustituto then begin //Extraigo el sustituto del árbol.
  575             Jugadores^.Menores:=Sustituto^.Mayores;
  576             Sustituto^.Mayores:=nil;
  577         end;
  578     end;
  579 end;
  580 
  581 {Este procedimiento nos permite eliminar un nodo de un árbol.}
  582 {El arbol no puede ser "nil" ya que se verifico anteriormente que el jugador a eliminar si estaba en el árbol.}
  583 Procedure ElminarDeArbol(var Jugadores: PuntArbol; Nombre: String);
  584 var Sustituto: PuntArbol;
  585 begin
  586     Sustituto:=nil;
  587     If Jugadores^.Nombre=Nombre then begin
  588         If (Jugadores^.Menores<>nil) and (Jugadores^.Mayores<>nil) then begin //Si el nodo a eliminar tiene dos hijos.
  589             ExtraerMenorMayores(Jugadores^.Mayores,Sustituto);
  590             Sustituto^.Menores:=Jugadores^.Menores; //Aquí las ramas del nodo a eliminar pasan a ser las ramas del sustituto.
  591             Sustituto^.Mayores:=Jugadores^.Mayores;
  592         end
  593         else If Jugadores^.Menores<>nil then //Si el nodo a eliminar tiene solo hijos menores.
  594             Sustituto:=Jugadores^.Menores
  595         else If Jugadores^.Mayores<>nil then //Si el nodo a eliminar tiene solo hijos mayores.
  596             Sustituto:=Jugadores^.Mayores;
  597         Dispose(Jugadores);
  598         Jugadores:=Sustituto;
  599     end
  600     else If Jugadores^.Nombre>Nombre then
  601             ElminarDeArbol(Jugadores^.Menores,Nombre)
  602     else If Jugadores^.Nombre<Nombre then
  603             ElminarDeArbol(Jugadores^.Mayores,Nombre);
  604 end;
  605 
  606 {Este procedimiento nos permite eliminar un jugador del archivo.}
  607 Procedure EliminarDeArchivo(var PalaPasabra: ArchivoJugadores; NombreJugador: String);
  608 var Jugador: DatosJugador;
  609 begin
  610     Seek(PalaPasabra,0);
  611     Read(PalaPasabra,Jugador);
  612     While (Jugador.Nombre<>NombreJugador) or (Jugador.Eliminado=true) do 
  613         Read(PalaPasabra,Jugador);
  614     Jugador.Eliminado:=True;
  615     Seek(PalaPasabra,FilePos(PalaPasabra)-1);
  616     Write(PalaPasabra,Jugador);
  617 end;
  618 
  619 {Este procedimiento nos permite eliminar un jugador.}
  620 Procedure EliminarJugador(var PalaPasabra: ArchivoJugadores; var Jugadores: PuntArbol);
  621 var Nombre,Opcion: String;
  622     JugadorEliminado: Boolean;
  623 begin
  624     JugadorEliminado:=False;
  625     If Jugadores<>nil then begin
  626         While not JugadorEliminado do begin
  627             Clrscr;
  628             gotoXY(32,2);
  629             Writeln('ELIMINAR JUGADOR');
  630             Writeln;
  631             Write('Ingrese nombre de jugador a eliminar: ');
  632             Readln(Nombre);
  633             Writeln;
  634             Nombre:=LowerCase(Nombre);
  635             Nombre[1]:=UpCase(Nombre[1]);
  636             If (Length(Nombre)<20) and (EstaEnArbol(Jugadores,Nombre)) then begin //Si el nombre posee más de 20 caracteres directamente no se recorre el árbol.
  637                 EliminarDeArchivo(PalaPasabra,Nombre);
  638                 ElminarDeArbol(Jugadores,Nombre);
  639                 Writeln('JUGADOR ELIMINADO CON ÉXITO');
  640                 delay(1500);
  641                 JugadorEliminado:=True; //Finalizo la sentencia "While". Ya fue eliminado un jugador.
  642             end
  643             else begin
  644                 Writeln('El Jugador que quiere eliminar no existe');
  645                 Writeln('¿Desea Ingresar otro Nombre?(s/n)');
  646                 Readln(Opcion);
  647                 If Opcion='n' then
  648                     JugadorEliminado:=True;
  649             end;
  650         end;
  651     end
  652     else begin
  653         Clrscr;
  654         Writeln('No hay jugadores cargados');
  655         Writeln;
  656         Writeln('Pulse cualquier tecla para volver al menú principal');
  657         Readkey;
  658     end;
  659 end;
  660 
  661 {Este procedimiento nos permite confirmar que el usuario realmente quiere abandonar el programa y no pulso la opción por error.}
  662 Procedure Salir(var Opcion: String);
  663 begin
  664     Clrscr;
  665     Writeln('¿Esta seguro que desea salir?(s/n)');
  666         Readln(Opcion);
  667     If Opcion<>'s' then
  668         Opcion:='s'
  669     else 
  670         Opcion:='n';
  671 end;
  672 
  673 {Este procedimiento nos muestra el menú de opciones.}
  674 Procedure MostrarMenuOpciones;
  675 begin
  676     Clrscr;
  677     GotoXY(32,2);
  678     Writeln('MENÚ PRINCIPAL');
  679     Writeln;
  680     Writeln('¿Que desea realizar?');
  681     Writeln;
  682     Writeln(' (1) Agregar Jugador');
  683     Writeln(' (2) Ver lista de jugadores');
  684     Writeln(' (3) Ver los diez jugadores con mayor cantidad de partidas ganadas');
  685     Writeln(' (4) Jugar');
  686     Writeln(' (5) Borrar un Jugador');
  687     Writeln(' (6) Salir');
  688     Writeln;
  689 end;
  690 
  691 {Este procedimiento se encarga de ejecutar todas las opciones que desee el usuario.}
  692 Procedure EjecutarOpciones(var PalaPasabra: ArchivoJugadores; var Preguntas: ArchivoPreguntas; Jugadores: PuntArbol);
  693 var Opcion1,Opcion2: String; //Las opciones son de tipo string por que así lo aclaraba la consigna. Las variables de tipo "char" suelen tener problemas en el moodle.
  694 begin
  695     Opcion2:='s';
  696     While Opcion2='s' do begin
  697         MostrarMenuOpciones;// Se muestran todas las opciones posibles a realizar.
  698         Write('Ingrese Opción: ');
  699         Readln(Opcion1);
  700         While (Opcion1>'6') or (Opcion1<'1') do begin
  701             Writeln('Opción Invalida');
  702             Write('Ingrese Opción: ');
  703             Readln(Opcion1);
  704         end;
  705         Case Opcion1 of
  706             '1': AgregarJugador(PalaPasabra,Jugadores);
  707             '2': VerListaJugadores(Jugadores);
  708             '3': MostrarTop10(Jugadores);
  709             '4': Jugar(Jugadores,Preguntas,PalaPasabra);
  710             '5': EliminarJugador(PalaPasabra, Jugadores);
  711             '6': Salir(Opcion2);
  712         end;
  713     end;
  714 end;
  715 
  716 {PROGRAMA PRINCIPAL}
  717 var PalaPasabra: ArchivoJugadores;
  718     Preguntas: ArchivoPreguntas;
  719     Jugadores: PuntArbol;
  720 begin
  721     Randomize; //Cada vez que ejecutemos el código la elección random será distinta.
  722     Assign(PalaPasabra,'/ip2/DavidBurckhardt-Jugadores.dat');
  723     Assign(Preguntas,'/ip2/palabras.dat'); //Se supone que el archivo "Preguntas" existe y esta cargado.
  724     AbrirArchivo(PalaPasabra); 
  725     Jugadores:=nil; //Se inicializa el árbol en "nil" para evacuar errores.
  726     GenerarArbol(PalaPasabra,Jugadores);
  727     GotoXY(24,10); //Posiciono el cursor en estas coordenadas específicas.
  728     Writeln('¡¡¡BIENVENIDO A PALAPASABRA!!!');
  729     GotoXY(22,17);
  730     Writeln('Pulse cualquier tecla para continuar');
  731     Readkey; //Al pulsar cualquier tecla sigue con la próxima sentencia.
  732     EjecutarOpciones(PalaPasabra,Preguntas,Jugadores);
  733     Close(PalaPasabra); //Finalizo la ejecución de opciones, se cierra el archivo de jugadores.
  734     Clrscr;
  735     GotoXY(30,11);
  736     Writeln('¡¡¡VUELVA PRONTO!!!');
  737 end.